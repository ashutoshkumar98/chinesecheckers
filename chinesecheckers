import numpy as np
import random
import tkinter as tk
from tkinter import messagebox

EMPTY = 0
HUMAN = 1
AI = 2

class ChineseCheckersBoard:
    def __init__(self):
        self.size = 9
        self.board = np.zeros((self.size, self.size), dtype=int)
        self.reset_board()

    def reset_board(self):
        self.board.fill(EMPTY)
        self.board[0:3, 0:3] = HUMAN
        self.board[-3:, -3:] = AI
    def is_valid_move(self, start, end):
        sx, sy = start
        ex, ey = end

        if 0 <= ex < self.size and 0 <= ey < self.size:
            if self.board[ex][ey] == EMPTY:
                if (abs(ex - sx) == 1 and abs(ey - sy) == 0) or (abs(ex - sx) == 0 and abs(ey - sy) == 1):
                    return True
                elif abs(ex - sx) == 1 and abs(ey - sy) == 1:
                    return True
                
                elif abs(ex - sx) == 2 and abs(ey - sy) == 2:
                    mid_x = (ex + sx) // 2
                    mid_y = (ey + sy) // 2
                    return self.board[mid_x][mid_y] != EMPTY
                
                elif abs(ex - sx) == 2 and abs(ey - sy) == 0 and self.board[sx + (ex - sx) // 2][sy] != EMPTY:
                    return True
                elif abs(ex - sx) == 0 and abs(ey - sy) == 2 and self.board[sx][sy + (ey - sy) // 2] != EMPTY:
                    return True
        return False


             
    def make_move(self, start, end):
        if self.is_valid_move(start, end):
            sx, sy = start
            ex, ey = end
            self.board[ex][ey] = self.board[sx][sy]
            self.board[sx][sy] = EMPTY
            return True
        return False

class EnhancedAI:
    def __init__(self, board):
        self.board = board

    def choose_best_move(self):
        best_score = -np.inf
        best_move = None

        ai_pieces = [
            (x, y)
            for x in range(self.board.size)
            for y in range(self.board.size)
            if self.board.board[x][y] == AI
        ]

        for piece in ai_pieces:
            possible_moves = [
                (piece[0] + 1, piece[1]),
                (piece[0] - 1, piece[1]),
                (piece[0], piece[1] + 1),
                (piece[0], piece[1] - 1),
            ]
            for move in possible_moves:
                if self.board.is_valid_move(piece, move):
                    score = self.evaluate_move(piece, move)
                    if score > best_score:
                        best_score = score
                        best_move = (piece, move)

        return best_move

    def evaluate_move(self, start, end):
        
        sx, sy = start
        ex, ey = end

        original_distance = np.linalg.norm([sx - 0, sy - 0])
        new_distance = np.linalg.norm([ex - 0, ey - 0])

        return original_distance - new_distance

class ChineseCheckersGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Chinese Checkers")
        self.board = ChineseCheckersBoard()
        self.ai = EnhancedAI(self.board)
        self.human_turn = True
        self.create_widgets()

    def create_widgets(self):
        self.canvas = tk.Canvas(self, width=650, height=650, bg='black')
        self.canvas.pack()

        self.reset_button = tk.Button(self, text="Reset", command=self.reset_game)
        self.reset_button.pack()

        self.draw_board()

    def reset_game(self):
        self.board.reset_board()
        self.human_turn = True
        self.draw_board()

    def draw_board(self):
        self.canvas.delete("all")
        square_size = 650 // self.board.size

        for i in range(self.board.size):
            self.canvas.create_line(0, i * square_size, 650, i * square_size, fill="green")
            self.canvas.create_line(i * square_size, 0, i * square_size, 650, fill="green")

        for x in range(self.board.size):
            for y in range(self.board.size):
                piece = self.board.board[x][y]
                if piece == HUMAN:
                    self.canvas.create_oval(
                        y * square_size + 10,
                        x * square_size + 10,
                        (y + 1) * square_size - 10,
                        (x + 1) * square_size - 10,
                        fill="yellow",
                    )
                elif piece == AI:
                    self.canvas.create_oval(
                        y * square_size + 10,
                        x * square_size + 10,
                        (y + 1) * square_size - 10,
                        (x + 1) * square_size - 10,
                        fill="red",
                    )

    def handle_human_move(self, event):
        if not self.human_turn:
            return  

        
        square_size = 650 // self.board.size
        clicked_x = event.y // square_size
        clicked_y = event.x // square_size

        self.handle_move((clicked_x, clicked_y))

    def handle_move(self, position):
        if hasattr(self, "selected_piece"):
            if self.board.make_move(self.selected_piece, position):
                self.human_turn = False
                self.draw_board()
                if self.check_win_human():
                    self.show_win_dialog()
                else:
                    self.after(500, self.handle_ai_turn)
                delattr(self, "selected_piece")
        elif self.board.board[position[0]][position[1]] == HUMAN:
            self.selected_piece = position

    def handle_ai_turn(self):
        best_move = self.ai.choose_best_move()
        if best_move is not None:
            start, end = best_move
            self.board.make_move(start, end)
            self.draw_board()
            if self.check_win_ai():
                self.show_loss_dialog()
        self.human_turn = True

    def check_win_ai(self):

        for i in range(self.board.size):
            if self.board.board[i][0] == AI and all(self.board.board[i+j][0+k] == AI for j in range(3) for k in range(3)):
                return True
        return False
    def check_win_human(self):
       
        for i in range(self.board.size - 2):
            if self.board.board[i][-1] == HUMAN and all(self.board.board[i+j][-3+k] == HUMAN for j in range(3) for k in range(3)):
                return True
        return False


    def show_win_dialog(self):
        response = messagebox.askyesno("You Win", "Congratulations! You win! Play again?")
        if response:
            self.reset_game()

    def show_loss_dialog(self):
        response = messagebox.askyesno("You Lose", "You lost. Play again?")
        if response:
            self.reset_game()


if __name__ == "__main__":
    gui = ChineseCheckersGUI()
    gui.canvas.bind("<Button-1>", gui.handle_human_move)
    gui.mainloop()
